[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro EXTRUDER_GO_HOME]
gcode:
  SAVE_GCODE_STATE NAME=EXTRUDER_GO_HOME
  G90
  G1 X142.2 Y151.5 F500
  RESTORE_GCODE_STATE NAME=EXTRUDER_GO_HOME

[gcode_macro CLEAN_EXTRUDER]
gcode:
  SAVE_GCODE_STATE NAME=clean_extruder_macro
  _CG28 #Conditional home printer
  G90 #Use absolute coordinates
  G1 X142.2 Y151.5 Z100 F3000 # Move Z axis to get to the nozzle and clean it
  RESTORE_GCODE_STATE NAME=clean_extruder_macro

[gcode_macro _CALIBRATION_PREPARE]
description: Prepare printer for calibartion of Z-offset/Screw-tilt/bed_mesh
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
    {% set CHECK_EXTRUDER_TEMP = params.CHECK_EXTRUDER_TEMP|default(True) %}
    {% set CHECK_BED_TEMP = params.CHECK_BED_TEMP|default(True) %}
    # If the target is more than 80 (max for the BLtouch is 65)
    {% set MAX_TEMP_FOR_PROBING = 80 %}
    {% set MIN_EXTRUDER_TEMP = params.MIN_EXTRUDER_TEMP|default(75)|float %}
    {% if CHECK_EXTRUDER_TEMP == True %}
      { action_respond_info("Disabling heater on extruder and waiting to cool down to: {}".format((MIN_EXTRUDER_TEMP))) }
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 #Disable heater on extruder
      {% if printer.extruder.temperature|float >= MIN_EXTRUDER_TEMP %}
        M106 S255 #Turn on fan to cooldown extruder quicker
      {% endif %}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM=0 MAXIMUM={MIN_EXTRUDER_TEMP} #Wait for extruder to cool down
      M106 S0 #Turn off fan
    {% endif %}
    {% if CHECK_BED_TEMP == True %}
      {% if printer.heater_bed.target > MAX_TEMP_FOR_PROBING or BED_TEMP > MAX_TEMP_FOR_PROBING %}
        { action_respond_info("The target temp is over allowe max for probing. Setting temporarily: {} for probing".format((MAX_TEMP_FOR_PROBING))) }
        {% set BED_TEMP = MAX_TEMP_FOR_PROBING %}
      {% endif %}
      { action_respond_info("Wait for the bed temperature to reach: {}".format((BED_TEMP))) }
      M190 S{BED_TEMP} # Set and wait for bed temp
    {% endif %}

[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    _CG28 #Home printer
    _CALIBRATION_PREPARE
    _PROBE_CALIBRATE

[gcode_macro SCREWS_TILT_CALCULATE]
rename_existing: _SCREWS_TILT_CALCULATE
gcode:
    # Check if the target is already set this will ensure the STC will not change
    # bed_temp when Fluidd or KlipperScreen retry button is pressed
    {% if printer.heater_bed.target > 0 %}
      {% set BED_TEMP = printer.heater_bed.target %}
    {% else %}
      {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
    {% endif %}
    {% set MAX_DEVIATION = params.MAX_DEVIATION|default(0)|float %}

    _CG28 #Conditional home printer
    _CALIBRATION_PREPARE CHECK_EXTRUDER_TEMP=False BED_TEMP={BED_TEMP}
    # Max deviation is set with START_PRINT gcode_macro
    {% if MAX_DEVIATION > 0 %}
      _SCREWS_TILT_CALCULATE MAX_DEVIATION={MAX_DEVIATION}
    {% else %}
      _SCREWS_TILT_CALCULATE
    {% endif %}


[gcode_macro _BED_MESH_CALIBRATE_CUSTOM]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
    _CALIBRATION_PREPARE CHECK_EXTRUDER_TEMP=False BED_TEMP={BED_TEMP}
    BED_MESH_CALIBRATE ADAPTIVE=1 # Mesh calibrate (KAMP was added to Klipper)

# prime the nozzle 
[gcode_macro _PRIME_LINE]
gcode: 
    M117 Prime Line
    G92 E0 ;Reset Extruder
    # move z axis 
    G1 Z2.0 F3000 ;Move Z Axis up
    # move to prime position 
    G1 X10 Y30 Z0.28 F5000.0 ;Move to start position
    G1 X10 Y200.0 Z0.28 F1500.0 E15 ;Draw the first line
    G1 X11 Y200.0 Z0.28 F5000.0 ;Move to side a little
    G1 X11 Y50 Z0.28 F1500.0 E30 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z2.0 F3000 ;Move Z Axis up

# From https://github.com/Klipper3d/klipper/blob/master/config/sample-macros.cfg
######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.

[gcode_macro START_PRINT]
gcode:
    TIMELAPSE_TAKE_FRAME
    {% set BED_TEMP = params.BED_TEMP|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|float %}
    G90 # Use absolute coordinates
    _CG28 #Conditional home printer
    SCREWS_TILT_CALCULATE MAX_DEVIATION=0.2 BED_TEMP={BED_TEMP} # This might lower bed temp for bl-touch
    _BED_MESH_CALIBRATE_CUSTOM BED_TEMP={BED_TEMP} # Run automesh
    M104 S{EXTRUDER_TEMP} # Set nozzle to reach temperature
    M190 S{BED_TEMP} #Set and wait for bed temp
    G1 Z5.0 F3000 ;Move Z Axis up
    M109 S{EXTRUDER_TEMP}  # Set and wait nozzle to reach temperature
    LINE_PURGE # Prime lime with KAMP

[gcode_macro END_PRINT]
gcode:
    M140 S0 #Turn off bed
    M104 S0 #Turn off extruder
    M106 S0 #Turn off fan
    G91 # Move nozzle away from print while retracting
    G1 X-2 Y-2 E-3 F300
    G1 Z10 F3000 # Raise nozzle by 10mm 
    G90 # Use absolute coordinate
    # Move to save position
    _TOOLHEAD_PARK_PAUSE_CANCEL
    # Disable steppers
    M84
    
######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

# Fluidd Custom Pause/Resume options
## Client variable macro for your printer.cfg
#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
#variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos: True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x: 310.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y: 300.0   ; custom y position; value must be within your defined min and max of Y
variable_speed_move: 150
variable_park_at_cancel: True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
gcode:



[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro MOVE_TO_PURGEBUCKET]
gcode:
    SAVE_GCODE_STATE NAME=load_state
    _CG28 #Conditional home printer
    _TOOLHEAD_PARK_PAUSE_CANCEL
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  20
variable_purge_distance:  70
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    MOVE_TO_PURGEBUCKET
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    G1 E-5 F{speed} # retract for oozing 
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  60
variable_purge_distance:  2
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 45 %}
    SAVE_GCODE_STATE NAME=unload_state
    MOVE_TO_PURGEBUCKET
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state
    CLEAR_ACTIVE_SPOOL

[gcode_macro STATUS_TEST]
gcode:
    { action_respond_info("Printing: {}".format((printer.print_stats.filename))) }
    { action_respond_info("Status: {}".format((printer.idle_timeout.state))) }

[gcode_macro PID_TUNE_ALL]
description: PID tune both heater and bed
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=200
  PID_CALIBRATE HEATER=heater_bed TARGET=60
  SAVE_CONFIG

[idle_timeout]
timeout: 600
gcode:
  { action_respond_info("Will execute poweroff gcode in 5 minutes. Printer status: {}".format((printer.idle_timeout.state))) }
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=300

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[gcode_macro POWER_OFF_PRINTER]
gcode:
  # If paused by hand or by filament sensor turn off heater
  {% if printer.pause_resume.is_paused %}
    { action_respond_info("Disable extruder heater due to idle") }
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 #Disable heater on extruder
  {% else %}
    { action_respond_info("Powering off due to idle") }
    M84
    # Wait for temperature on extruder to cooldown
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=75
    TURN_OFF_HEATERS
    # power off printer
    {action_call_remote_method("set_device_power", device="printer", state="off")}
  {% endif %}
